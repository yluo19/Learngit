
git init  : initial this directory a git repository

git add   : add a file into git

git commit -m "xxx" : commit the file what u did

git status : get the status of git work space

git diff   : get the differences between the old file and new file

git log    : show the history of commits and where is the HEAD pointer

git reset --hard commit_id : like: git reset --hard HEAD^(^^..) or HEAD~100

			    go back to what commit u want use commit_id

git reflog  : show the history of commands u did

撤销操作：

1.还未被add进stage：
	
	git checkout --<filename>

2.已被add进stage：

	git reset HEAD <filename>
	
	git checkout --<filename>	

3.已被commit进work repositories：

	git reset --hard HEAD^  (版本退回)
 

REMOVE operations :

1)rm filename

2)git rm/add <filename>

3)git commit -m "xxx"


Link to the origin on GitHub:

1)git remote add origin git@github.com:<server-name>/repo-name.git
2)git push -u origin master (first time push)
3)git push origin master


branch management:

 git checkout -b <dev> : create a branch dev and let head pointer on dev 
	==  git branch dev
	    git checkout dev


 git branch <branchname>  : show all branchs and * is branch used now

 git checkout <branchname> : make HEAD point on <>

 git merge <branchname>   : merge branch with master

 git branch -d <branchname> : delete the branch



Fix Bug steps:

1) git stash : save current work repo into stash

2) git checkout -b <issuename> : create a branch to fix bug

3) git checkout <mainbranch> and git merge --no-ff -m"commmits" <issuename>
	go back to main branch and use no-ff merge issue branch and main branch

4) git checkout dev 

5) git stash list : check which stash u saved before

6) git stash pop : pop the stash and delete atuo

7) git stash apply stash@{<num>} : recover stash but do not delete

8) git stash drop ..  : delete the stash 


Multi-Working:

1) git push origin <branchname> : try to push first 

2) git pull

3) git checkout -b <branchname> origin/<branchname>: create corresponding branch

4) git branch --set-upstream <branchname> origin/<branchname>

5) git pull

6) fix conflict and push again


Tagging :

git tag <tagname> -m "blablabla..."

git show <tagname>

git tag : show all tags u have done



















 
